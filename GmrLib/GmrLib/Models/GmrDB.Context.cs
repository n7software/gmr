//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GmrLib.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class GmrEntities : DbContext
    {
        public GmrEntities()
            : base("name=GmrEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Civilization> Civilizations { get; set; }
        public virtual DbSet<Comment> Comments { get; set; }
        public virtual DbSet<GameInviteToken> GameInviteTokens { get; set; }
        public virtual DbSet<GamePlayer> GamePlayers { get; set; }
        public virtual DbSet<Game> Games { get; set; }
        public virtual DbSet<MessageRecipient> MessageRecipients { get; set; }
        public virtual DbSet<Message> Messages { get; set; }
        public virtual DbSet<Notification> Notifications { get; set; }
        public virtual DbSet<Payment> Payments { get; set; }
        public virtual DbSet<Preference> Preferences { get; set; }
        public virtual DbSet<Save> Saves { get; set; }
        public virtual DbSet<SteamGame> SteamGames { get; set; }
        public virtual DbSet<Turn> Turns { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<SteamGameCivilization> SteamGameCivilizations { get; set; }
        public virtual DbSet<UserStat> UserStats { get; set; }
        public virtual DbSet<UsersGamesStarted> UsersGamesStarteds { get; set; }
    
        public virtual int CalculatePointsForTurn(Nullable<int> turnId, Nullable<int> gameId, ObjectParameter points)
        {
            var turnIdParameter = turnId.HasValue ?
                new ObjectParameter("turnId", turnId) :
                new ObjectParameter("turnId", typeof(int));
    
            var gameIdParameter = gameId.HasValue ?
                new ObjectParameter("gameId", gameId) :
                new ObjectParameter("gameId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CalculatePointsForTurn", turnIdParameter, gameIdParameter, points);
        }
    
        public virtual int DeleteUserStats(Nullable<long> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteUserStats", userIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> GetPlayersStartedGameIds(Nullable<long> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GetPlayersStartedGameIds", userIdParameter);
        }
    
        public virtual int GetUserStats(Nullable<long> userId, ObjectParameter userName, ObjectParameter avatarUrl, ObjectParameter totalPoints, ObjectParameter gameCount, ObjectParameter turnCount, ObjectParameter skipCount, ObjectParameter vacationCount, ObjectParameter averageTurnTime, ObjectParameter lastUpdated)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetUserStats", userIdParameter, userName, avatarUrl, totalPoints, gameCount, turnCount, skipCount, vacationCount, averageTurnTime, lastUpdated);
        }
    
        public virtual int UpdateUserPointsTotal(Nullable<long> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateUserPointsTotal", userIdParameter);
        }
    }
}
